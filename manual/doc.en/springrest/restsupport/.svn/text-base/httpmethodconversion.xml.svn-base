<chapter id="springrest_restsupport_httpmethodconversion">
	<title>HTTP Method Conversion</title>
	
	<para>
		As explained before, REST architecture recommends using all methods defined in HTTP, 
		but HTML based on browser supports only two, GET and POST. 
		PUT and DELETE can be used with JavaScript but require a complicated coding process. 
		Or, simply do a POST with the 'real' method as an additional parameter modeled as a hidden input field in an HTML form that defines the actual HTTP Method. 
	</para>
	<para>
		Spring 3 provides <emphasis role="bold">HiddenHttpMethodFilter</emphasis> 
		and supports <emphasis role="bold">the conversion of HTTP Method by finding hidden input parameter that defines the actual HTTP Method.</emphasis> 
		<emphasis role="bold">If you add HiddenHttpMethodFilter in web.xml, 
		HTTP Method is changed to '_method' value when HTTP Method is POST and parameter called '_method' exists. </emphasis>
		To use parameter name other than '_method', define using methodParam property.
	</para>
	
	<para>
		In Spring, <![CDATA[<form:form>]]> adds automatically hidden input field that defines the actual HTTP Method, 
        making it more convenient to use.
		<programlisting language="xml"><![CDATA[<form:form method="delete">
    <input type="submit" value="Delete Movie"/>
</form:form>]]></programlisting>
		When the above is written in JSP, internally, "_method=delete" is transferred using POST.
	</para>
	<important>
		<title>Notes for using HiddenHttpMethodFilter</title>
		<para>
			When using HiddenHttpMethodFilter, 
			note that the previous MultipartResolver configuration for file upload should change 
			because HiddenHttpMethodFilter does not run properly when enctype of form is defined as 'multipart/form-data' for file upload.
		</para>
		<para>
			Define <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/multipart/support/MultipartFilter.html">MultipartFilter</ulink> 
			before HiddenHttpMethodFilter in web.xml, 
			and set MultipartResolver as 'filterMultipartResolver' Bean name in root Application Context of Spring 
			for HiddenHttpMethodFilter to run properly. 
		</para>
		<para>
			The following is the defining of MultipartFilter and HiddenHttpMethodFilter in web.xml.
			<programlisting language="xml"><![CDATA[<filter>
    <filter-name>multipartFilter</filter-name>
    <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>multipartFilter</filter-name>
    <url-pattern>/springrest/*</url-pattern>
</filter-mapping>
<filter>
    <filter-name>httpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>httpMethodFilter</filter-name>
    <url-pattern>/springrest/*</url-pattern>
</filter-mapping>]]></programlisting>			
   		</para>
   		<para>
   			The following is MultipartResolver configuration defined in context-springrest-multipart.xml.
   			<programlisting language="xml"><![CDATA[<bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize">
        <value>10000000</value>
    </property>
</bean>]]></programlisting>
			When MultipartResolver Bean is defined in a name other than 'filterMultipartResolver', 
			'multipartResolverBeanName' is set using <![CDATA[<init-param>]]> when defining MultipartFilter in web.xml.
   		</para>
	</important>	
</chapter>