<chapter id="springrest_restsupport_httpmethodconversion">
	<title>HTTP Method Conversion</title>
	
	<para>
		앞서 설명했듯이, REST 아키텍처에서는 HTTP에서 정의하고 있는 모든 method를 사용할 것을 권장하고 있지만,
		브라우저 기반의 HTML에서는 이 중 단 2가지, GET과 POST만을 지원한다.
		JavaScript를 이용해서 PUT과 DELETE를 사용할 수도 있겠지만 번거로운 코딩 작업이 추가되어야 하기 때문에, 
		일반적으로 HTML에는 POST를 사용하고 실제 HTTP Method를 지정하는 hidden 타입의 입력 필드를 추가해서 사용하는 경우가 많다.
	</para>
	<para>
		Spring 3에서는 <emphasis role="bold">HiddenHttpMethodFilter</emphasis>를 제공하여 <emphasis role="bold">실제 HTTP Method를 지정하는 hidden 타입의 입력 파라미터를 찾아내서 HTTP Method를 변환</emphasis>하는 작업을 지원해준다.
		<emphasis role="bold">web.xml에 HiddenHttpMethodFilter 설정을 추가하면, HTTP Method가 POST이고 _method라는 파라미터가 존재하는 경우 HTTP의 Method를 _method 값으로 바꾼다.</emphasis>
		'_method'가 아닌 다른 파라미터명을 사용하려면 methodParam 속성을 이용해서 지정해준다.
	</para>
	
	<para>
		또한 Spring에서는 <![CDATA[<form:form>]]>에서 실제 HTTP Method를 지정하는 hidden 타입의 입력 필드를 자동으로 추가해주기 때문에 훨씬 더 편리하게 사용할 수 있다.
		<programlisting language="xml"><![CDATA[<form:form method="delete">
    <input type="submit" value="Delete Movie"/>
</form:form>]]></programlisting>
		JSP에 위와 같이 작성하면, 내부적으로는 POST 방식으로 "_method=delete"가 전달되는 것이다.
	</para>
	<important>
		<title>HiddenHttpMethodFilter 사용 시 유의 사항</title>
		<para>
			HiddenHttpMethodFilter를 사용할 때 한가지 주의할 점은, 
			파일 업로드를 위해 form의 enctype 속성을 'multipart/form-data'로 지정하는 경우 HiddenHttpMethodFilter가 정상적으로 동작하기 않기 때문에
			기존에 파일 업로드를 위해서 사용했던 MultipartResolver 설정 방식을 변경해야 한다는 것이다.
		</para>
		<para>
			web.xml에다가 <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/multipart/support/MultipartFilter.html">MultipartFilter</ulink>를 HiddenHttpMethodFilter 앞에 정의하고,
			MultipartResolver를 Spring의 root Application Context에 'filterMultipartResolver'라는 Bean 이름으로 설정해 주어야 HiddenHttpMethodFilter가 정상적으로 동작할 수 있다.
		</para>
		<para>
			다음은 web.xml에 MultipartFilter와 HiddenHttpMethodFilter를 정의한 모습이다.
			<programlisting language="xml"><![CDATA[<filter>
    <filter-name>multipartFilter</filter-name>
    <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>multipartFilter</filter-name>
    <url-pattern>/springrest/*</url-pattern>
</filter-mapping>
<filter>
    <filter-name>httpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>httpMethodFilter</filter-name>
    <url-pattern>/springrest/*</url-pattern>
</filter-mapping>]]></programlisting>			
   		</para>
   		<para>
   			다음은 context-springrest-multipart.xml에 정의한 MultipartResolver 설정이다.
   			<programlisting language="xml"><![CDATA[<bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize">
        <value>10000000</value>
    </property>
</bean>]]></programlisting>
			MultipartResolver Bean을 'filterMultipartResolver'가 아닌 다른 이름으로 정의할 경우, web.xml에서 MultipartFilter 정의 시에 <![CDATA[<init-param>]]>을 이용해서 'multipartResolverBeanName'을 설정해준다.
   		</para>
	</important>	
</chapter>